package edu.chapman.manusync;

import javax.inject.Singleton;

import dagger.Component;
import edu.chapman.manusync.activity.AddUserActivity;
import edu.chapman.manusync.activity.LogInActivity;
import edu.chapman.manusync.activity.MainMenuActivity;
import edu.chapman.manusync.activity.NewLotActivity;

/**
 * Created by Nicholas Corder - corde116@mail.chapman.edu on 10/8/2015.
 */

@Singleton
@Component(modules = ApplicationModule.class)
public interface MANUComponent {

    /*
     * This is where we inform dagger of the activities that will need to have dependencies injected.
     * When the activitiy called MANUComponent.Instance.get().inject(...); it will run through any
     * instance variables the activity has and create them. This gets rid of the need for any Factory's
     * and makes the code much more readable. Please look into Google's Dagger - 2 http://google.github.io/dagger/
     * for any further explainations, questions, or examples.
     */

    void inject(MainMenuActivity mainMenuActivity);

    final class Instance {
        private static MANUComponent component;

        /**
         * Initialize the object graph from Application onCreate.
         *
         * The DaggerMANUComponent class is generated by Dagger-2, please reference
         * http://google.github.io/dagger/ and look under "Building the Graph"
         *
         * A brief summary of this class is that it gives dagger the dependencies that any injected
         * classes need. In this case, it builds the application module which provides us the two
         * objects every dependency uses (a context [BaseApplication], and/or a DatabaseHelper).
         */
        public static void init(BaseApplication application) {
            component = DaggerMANUComponent.builder()
                    .applicationModule(new ApplicationModule(application))
                    .build();
        }

        public static MANUComponent get() {
            return component;
        }
    }
}
